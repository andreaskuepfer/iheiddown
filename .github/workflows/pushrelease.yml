on:
  push:
    branches:
      - main

name: Binary creation

jobs:

  build:
    name: Build for ${{ matrix.config.os }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release', artifact_name: '*.tar.gz', asset_name: macOS}
          - {os: windows-latest, r: 'release', artifact_name: '*.zip', asset_name: winOS}
          - {os: ubuntu-20.04, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest", artifact_name: '*.tar.gz', asset_name: linuxOS}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Setup R
        uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          
      - name: Setup tinytex
        uses: r-lib/actions/setup-tinytex@master

      - name: Setup pandoc
        uses: r-lib/actions/setup-pandoc@v1
        with:
         pandoc-version: '2.7.3' # The pandoc version to download (if necessary) and use.

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'cat(remotes::system_requirements("ubuntu", "20.04"), sep = "\n")')

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("pkgbuild")
        shell: Rscript {0}

      - name: Document
        run: Rscript -e 'roxygen2::roxygenise()'

      - name: Binary
        run: |
          pkgbuild::clean_dll()
          binary <- pkgbuild::build(binary = TRUE, needs_compilation = TRUE, compile_attributes = TRUE)
          dir.create("build")
          file.copy(binary, "build")
        shell: Rscript {0}

      - name: Save binary artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.config.asset_name }}
          path: build/

      - name: Install package
        if: runner.os == 'macOS'
        run: R CMD INSTALL .

      - name: Render output samples
        if: runner.os == 'macOS'
        run: Rscript R/_render.R

      - name: Save output samples artifact
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v2
        with:
          name: IHEIDThesisExample.pdf
          path: 00-Example/versions/IHEIDThesisExample.pdf

      - name: Clean-up unnecessary files
        if: runner.os == 'macOS'
        run: Rscript -e 'unlink("00-Example", recursive = TRUE)'

      - name: Calculate code coverage
        run: Rscript -e "covr::codecov()"

  release:
    name: Bump version and release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout one
        uses: actions/checkout@master
        with:
          fetch-depth: '0'

      - name: Bump version and push tag
        id: newtag
        uses: anothrNick/github-tag-action@1.17.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          DEFAULT_BUMP: patch
          RELEASE_BRANCHES: main

      - name: Checkout two
        uses: actions/checkout@v2
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.newtag.outputs.tag }}
          release_name: Release ${{ steps.newtag.outputs.tag }}
          draft: false
          prerelease: false

      - name: Download binaries
        uses: actions/download-artifact@v2

      - name: Display structure of downloaded files
        run: ls -R

      - name: Upload Thesis Example Asset
        id: upload-thesis-example
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: IHEIDThesisExample.pdf
          asset_name: IHEIDThesisExample.pdf
          asset_content_type: application/pdf

      - name: Rename Mac release
        run: mv ./macOS/*.tgz iheiddown_macOS.tgz

      - name: Upload Mac binary
        id: upload-mac
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: iheiddown_macOS.tgz
          asset_name: iheiddown_macOS.tgz
          asset_content_type: application/zip

      - name: Rename Linux release
        run: mv ./linuxOS/*.tar.gz iheiddown_linuxOS.tar.gz

      - name: Upload Linux binary
        id: upload-lin
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: iheiddown_linuxOS.tar.gz
          asset_name: iheiddown_linuxOS.tar.gz
          asset_content_type: application/zip

      - name: Rename Windows release
        run: mv ./winOS/*.zip iheiddown_winOS.zip

      - name: Upload Windows binary
        id: upload-win
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: iheiddown_winOS.zip
          asset_name: iheiddown_winOS.zip
          asset_content_type: application/zip

  render:
    name: Update README.md and push
    needs: build
    runs-on: macOS-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v1
      - uses: r-lib/actions/setup-pandoc@v1

      # install packages needed
      - name: install required packages
        run: Rscript -e 'install.packages(c("rmarkdown","remotes"))'
        
      # Install qData
      - name: install qData
        run: Rscript -e 'remotes::install_github("globalgov/qData")'

      # install qData
      - name: install IHEIDDOWN package
        run: Rscript -e 'remotes::install_github("jhollway/iheiddown")'

      # Render README.md using rmarkdown
      - name: render README
        run: Rscript -e 'rmarkdown::render("README.Rmd", output_format = "md_document")'

      - name: commit rendered README
        run: |
          git add README.md
          git commit -m "Re-build README.md" || echo "No changes to commit"
          git push origin master || echo "No changes to commit"

